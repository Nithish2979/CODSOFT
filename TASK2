TIC-TAC-TOE AI 




import math

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def moves_left(board):
    for row in board:
        if " " in row:
            return True
    return False

def check_win(board, player):
    
    for row in board:
        if all([cell == player for cell in row]):
            return True

    for col in range(3):
        if all([board[row][col] == player for row in range(3)]):
            return True

    if all([board[i][i] == player for i in range(3)]) or all([board[i][2 - i] == player for i in range(3)]):
        return True

    return False

def minimax(board, depth, is_maximizing, alpha, beta):
    if check_win(board, "O"):
        return 10 - depth
    if check_win(board, "X"):
        return depth - 10
    if not moves_left(board):
        return 0

    if is_maximizing:
        max_eval = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "O"
                    eval = minimax(board, depth + 1, False, alpha, beta)
                    board[i][j] = " "
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        break
        return max_eval
    else:
        min_eval = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "X"
                    eval = minimax(board, depth + 1, True, alpha, beta)
                    board[i][j] = " "
                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)
                    if beta <= alpha:
                        break
        return min_eval

def find_best_move(board):
    best_move = None
    best_value = -math.inf
    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                board[i][j] = "O"
                move_value = minimax(board, 0, False, -math.inf, math.inf)
                board[i][j] = " "
                if move_value > best_value:
                    best_move = (i, j)
                    best_value = move_value
    return best_move

def play_game():
    board = [[" " for _ in range(3)] for _ in range(3)]
    current_player = "X"

    while True:
        print_board(board)
        if check_win(board, "X"):
            print("Congratulations! You win!")
            break
        if check_win(board, "O"):
            print("AI wins! Better luck next time.")
            break
        if not moves_left(board):
            print("It's a draw!")
            break

        if current_player == "X":
            # Human player's turn
            row = int(input("Enter the row (0, 1, 2): "))
            col = int(input("Enter the column (0, 1, 2): "))
            if board[row][col] == " ":
                board[row][col] = "X"
                current_player = "O"
            else:
                print("Invalid move! Try again.")
        else:
            # AI player's turn
            print("AI is making a move...")
            move = find_best_move(board)
            if move:
                board[move[0]][move[1]] = "O"
                current_player = "X"

play_game()
